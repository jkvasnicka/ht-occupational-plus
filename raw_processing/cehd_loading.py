'''
This module contains functions for loading and preprocessing Chemical Exposure
Health Data (CEHD) from OSHA. Logic for cleaning and preprocessing these data
can be found in a separate module.
'''

import os
import chardet
import pandas as pd

# FIXME: Why are some dt.year returning NaN?
#region: raw_chem_exposure_health_data
def raw_chem_exposure_health_data(
        cehd_settings,
        raw_cehd_dir=None,
        raw_cehd_file=None
        ):
    '''
    Load the raw Chemical Exposure Health Data (CEHD).

    This function serves as the top-level interface for loading the raw CEHD. 
    The user can load the raw CEHD from either:
        1. A directory containing multiple files via the function, 
           _raw_cehd_from_multiple_files(), or
        2. A single file that was previously generated by 
           _raw_cehd_from_multiple_files() and written to disk.
    
    Returns
    -------
    pandas.DataFrame
    '''
    if raw_cehd_dir and raw_cehd_file:
        raise ValueError(
            'Specify either "raw_cehd_dir" or "raw_cehd_file", not both.'
        )
    # FIXME: Should return the same as _raw_cehd_from_single_file()
    if raw_cehd_dir:
        exposure_data = _raw_cehd_from_multiple_files(
            raw_cehd_dir, 
            cehd_settings['rename_mapper'],
            dtype=cehd_settings['dtype']
            )
    elif raw_cehd_file:
        exposure_data = _raw_cehd_from_single_file(
            raw_cehd_file, 
            dtype=cehd_settings['dtype']
            )
    return exposure_data
#endregion

#region _raw_cehd_from_multiple_files
def _raw_cehd_from_multiple_files(raw_cehd_dir, rename_mapper, dtype=None):
    '''
    Load the Chemical Exposure Health Data (CEHD) into a single DataFrame.

    This function walks through the specified directory, identifies files
    following the naming convention 'sample_data_YEAR.extension', where
    'YEAR' is a four-digit year and 'extension' is either 'csv' or 'xml'.

    Parameters
    ----------
    raw_cehd_dir : str
        The directory containing the OSHA files.
    rename_mapper : dict
        The dictionary used to rename columns.

    Returns
    -------
    pd.DataFrame
        The concatenated DataFrame.
    '''
    exposure_data = []  # initialize
    for root, _, files in os.walk(raw_cehd_dir):
        for file in files:

            parts = file.split('.')
            extension = parts[-1]
            if extension in ['csv', 'xml']:
                # The file contains OSHA data
                year = parts[0].split('_')[-1]
                print(f'Loading {year} data...')
                if extension == 'csv':
                    year_data = _cehd_from_csv(
                        root, file, rename_mapper, dtype=dtype
                        )
                elif extension == 'xml':
                    year_data = _cehd_from_xml(
                        root, file, rename_mapper, dtype=dtype
                        )
                exposure_data.append(year_data)
    exposure_data = pd.concat(exposure_data, ignore_index=True)

    return exposure_data
#endregion

#region: _raw_cehd_from_single_file
def _raw_cehd_from_single_file(raw_cehd_file, dtype=None):
    '''
    '''
    return pd.read_csv(
            raw_cehd_file, 
            index_col=0,
            dtype=dtype
        )
#endregion

#region: _cehd_from_csv
def _cehd_from_csv(root, file, rename_mapper, dtype=None):
    '''
    Loads CSV data for a given range of years.

    Parameters
    ----------
    year_range : range
        The range of years to load data for.

    Returns
    -------
    dict
        A dictionary of DataFrames for each year.
    '''
    raw_cehd_file = os.path.join(root, file)

    # Determine encoding dynamically
    with open(raw_cehd_file, 'rb') as file:
        raw_data = file.read()
        encoding = chardet.detect(raw_data)['encoding']
    delimiter = _determine_delimiter(raw_cehd_file, encoding)
    
    csv_data = pd.read_csv(
        raw_cehd_file, 
        encoding=encoding, 
        delimiter=delimiter,
        dtype=dtype,
        low_memory=False
    )

    csv_data = _standardize(csv_data, rename_mapper)

    return csv_data
#endregion

#region: _determine_delimiter
def _determine_delimiter(file_path, encoding):
    '''
    Determines the delimiter used in a file.

    Parameters
    ----------
    file_path : str
        The path to the file.
    encoding : str
        The encoding of the file.

    Returns
    -------
    str
        The delimiter used in the file.
    '''
    with open(file_path, 'r', encoding=encoding) as file:
        first_line = file.readline()
        if '|' in first_line:
            return '|'
        return ','
#endregion

#region: _cehd_from_xml
def _cehd_from_xml(root, file, rename_mapper, dtype=None):
    '''
    Loads XML data from a file.

    Parameters
    ----------
    root : str
        The root directory where the file is located.
    file : str
        The name of the file.
    rename_mapper : dict
        The dictionary used to rename columns.

    Returns
    -------
    dict
        A dictionary of DataFrames for each year.
    '''
    raw_cehd_file = os.path.join(root, file)
    
    xml_data = pd.read_xml(raw_cehd_file, dtype=dtype)

    xml_data = _standardize(xml_data, rename_mapper)
    
    return xml_data
#endregion

#region: _standardize
def _standardize(exposure_data, rename_mapper):
    '''
    Standardize the DataFrame for concatenation.

    Parameters
    ----------
    exposure_data : pd.DataFrame
        The DataFrame to clean.
    rename_mapper : dict
        The dictionary used to rename columns.

    Returns
    -------
    pd.DataFrame
        The cleaned DataFrame.
    '''
    exposure_data.columns = exposure_data.columns.str.upper()
    exposure_data = exposure_data.rename(rename_mapper, axis=1)
    exposure_data = _strip_trailing_commas(exposure_data)
    return exposure_data
#endregion

#region: _strip_trailing_commas
def _strip_trailing_commas(df):
    '''
    Identifies and cleans trailing commas from DataFrame columns and contents.

    Parameters
    ----------
    df : pd.DataFrame
        The DataFrame to clean.

    Returns
    -------
    pd.DataFrame
        The cleaned DataFrame.
    '''
    columns_with_trailing_commas = {
        col : col.strip(',') for col in df
        if col.endswith(',')
    }

    for col in columns_with_trailing_commas:
        df[col] = df[col].str.strip(',')
    df = df.rename(columns_with_trailing_commas, axis=1)
    
    return df
#endregion